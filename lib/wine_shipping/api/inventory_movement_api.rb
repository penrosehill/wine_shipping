=begin
#Wineshipping API Suite

#Wineshipping API is a programmatically consumable service or an Application Programming Interface (API) suite designed to enable Wineshipping LLC's client applications to natively transmit and manage their order, view inventory, create product, validate address, track shipments etc.<br /><br />In order to access API operations request a user key and password from Wineshipping. For any questions please contact Wineshipping Helpdesk at <a href='mailto:api@wineshipping.com?Subject=API from Wineshipping'>api@wineshipping.com</a>.

OpenAPI spec version: V3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.44
=end

module WineShipping
  class InventoryMovementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Successful execution of this method will cancel an Open Purchase Order in Wineshipping's system and will return a transaction reference identifier.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_purchase_order(body, opts = {})
      cancel_purchase_order_with_http_info(body, opts)
      nil
    end

    # Successful execution of this method will cancel an Open Purchase Order in Wineshipping&#x27;s system and will return a transaction reference identifier.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_purchase_order_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryMovementApi.cancel_purchase_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoryMovementApi.cancel_purchase_order"
      end
      # resource path
      local_var_path = '/api/InventoryMovement/CancelPurchaseOrder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryMovementApi#cancel_purchase_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Successful execution of this method will cancel an Open Transfer Order in Wineshipping's system and will return a transaction reference identifier.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_transfer_order(body, opts = {})
      cancel_transfer_order_with_http_info(body, opts)
      nil
    end

    # Successful execution of this method will cancel an Open Transfer Order in Wineshipping&#x27;s system and will return a transaction reference identifier.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_transfer_order_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryMovementApi.cancel_transfer_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoryMovementApi.cancel_transfer_order"
      end
      # resource path
      local_var_path = '/api/InventoryMovement/CancelTransferOrder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryMovementApi#cancel_transfer_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Successful execution of this method will generate a new purchase order in Wineshipping's system and will return a transaction reference identifier. Store this identifier back into your system for reference later in the event there is an issue with the purchase order.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_purchase_order(body, opts = {})
      create_purchase_order_with_http_info(body, opts)
      nil
    end

    # Successful execution of this method will generate a new purchase order in Wineshipping&#x27;s system and will return a transaction reference identifier. Store this identifier back into your system for reference later in the event there is an issue with the purchase order.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_purchase_order_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryMovementApi.create_purchase_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoryMovementApi.create_purchase_order"
      end
      # resource path
      local_var_path = '/api/InventoryMovement/CreatePurchaseOrder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryMovementApi#create_purchase_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This operation is used to create a inventory transfer request between two Wineshipping managed inventory locations. Successful execution of this operation will generate a new transfer order in Wineshipping system. A transaction reference identifier is returned in this operation. Store this identifier in your application and systems as applicable. This reference ID is available in the event a problem occurs with the associated request.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_transfer_order(body, opts = {})
      create_transfer_order_with_http_info(body, opts)
      nil
    end

    # This operation is used to create a inventory transfer request between two Wineshipping managed inventory locations. Successful execution of this operation will generate a new transfer order in Wineshipping system. A transaction reference identifier is returned in this operation. Store this identifier in your application and systems as applicable. This reference ID is available in the event a problem occurs with the associated request.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_transfer_order_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryMovementApi.create_transfer_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoryMovementApi.create_transfer_order"
      end
      # resource path
      local_var_path = '/api/InventoryMovement/CreateTransferOrder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryMovementApi#create_transfer_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
