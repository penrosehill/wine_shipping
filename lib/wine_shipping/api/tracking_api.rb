=begin
#Wineshipping API Suite

#Wineshipping API is a programmatically consumable service or an Application Programming Interface (API) suite designed to enable Wineshipping LLC's client applications to natively transmit and manage their order, view inventory, create product, validate address, track shipments etc.<br /><br />In order to access API operations request a user key and password from Wineshipping. For any questions please contact Wineshipping Helpdesk at <a href='mailto:api@wineshipping.com?Subject=API from Wineshipping'>api@wineshipping.com</a>.

OpenAPI spec version: V3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.44
=end

module WineShipping
  class TrackingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # This operation provides delivery date estimation for Wineshipping fulfillment using FedEx and UPS carrier services within the USA. It requires an authenticated request with the recipient delivery address and desired range of future ship dates to generate a set of results for each applicable carrier and service class combination available for the delivery address and specified dates.  Note: The information provided by the Wineshipping Delivery Date Estimate API service is for estimating approximate delivery dates based on the corresponding FedEx and/or UPS carrier service information available at the time of inquiry, and is subject to change without notice. Due to these factors, Wineshipping cannot guarantee the accuracy of current or future information generated by the Delivery Date Estimate API service.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [DeliveryEstimateResult]
    def get_delivery_estimates(body, opts = {})
      data, _status_code, _headers = get_delivery_estimates_with_http_info(body, opts)
      data
    end

    # This operation provides delivery date estimation for Wineshipping fulfillment using FedEx and UPS carrier services within the USA. It requires an authenticated request with the recipient delivery address and desired range of future ship dates to generate a set of results for each applicable carrier and service class combination available for the delivery address and specified dates.  Note: The information provided by the Wineshipping Delivery Date Estimate API service is for estimating approximate delivery dates based on the corresponding FedEx and/or UPS carrier service information available at the time of inquiry, and is subject to change without notice. Due to these factors, Wineshipping cannot guarantee the accuracy of current or future information generated by the Delivery Date Estimate API service.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeliveryEstimateResult, Integer, Hash)>] DeliveryEstimateResult data, response status code and response headers
    def get_delivery_estimates_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.get_delivery_estimates ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TrackingApi.get_delivery_estimates"
      end
      # resource path
      local_var_path = '/api/Tracking/GetDeliveryEstimates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'DeliveryEstimateResult' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_delivery_estimates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This operation provides sales order and associated package tracking information and their status if available. This operation accepts a customer number and order number to locate the order information within the Wineshipping system. The result will include individual packages, associated tracking numbers, carrier status, and the shipping address information.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<TrackingResult>]
    def get_details(body, opts = {})
      data, _status_code, _headers = get_details_with_http_info(body, opts)
      data
    end

    # This operation provides sales order and associated package tracking information and their status if available. This operation accepts a customer number and order number to locate the order information within the Wineshipping system. The result will include individual packages, associated tracking numbers, carrier status, and the shipping address information.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TrackingResult>, Integer, Hash)>] Array<TrackingResult> data, response status code and response headers
    def get_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.get_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TrackingApi.get_details"
      end
      # resource path
      local_var_path = '/api/Tracking/GetDetails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Array<TrackingResult>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This operation provides package information in batches once warehouse activity started in order fulfillment. Provides filters options to search for packages by ship date range, last activity date range, shipping carrier, order numbers and options to paginate through the result set.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [PackageTrackingResult]
    def get_packages(body, opts = {})
      data, _status_code, _headers = get_packages_with_http_info(body, opts)
      data
    end

    # This operation provides package information in batches once warehouse activity started in order fulfillment. Provides filters options to search for packages by ship date range, last activity date range, shipping carrier, order numbers and options to paginate through the result set.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PackageTrackingResult, Integer, Hash)>] PackageTrackingResult data, response status code and response headers
    def get_packages_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.get_packages ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TrackingApi.get_packages"
      end
      # resource path
      local_var_path = '/api/Tracking/GetPackages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'PackageTrackingResult' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_packages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
