=begin
#Wineshipping API Suite

#Wineshipping API is a programmatically consumable service or an Application Programming Interface (API) suite designed to enable Wineshipping LLC's client applications to natively transmit and manage their order, view inventory, create product, validate address, track shipments etc.<br /><br />In order to access API operations request a user key and password from Wineshipping. For any questions please contact Wineshipping Helpdesk at <a href='mailto:api@wineshipping.com?Subject=API from Wineshipping'>api@wineshipping.com</a>.

OpenAPI spec version: V3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.44
=end

module WineShipping
  class BillingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # This method allows a customer to retrieve billing invoices. Billing invoices include Fulfillment, DTT, Storage, Supplemental invoice types. There are multiple input filters available for use, including filters to retrieve specific types of billing invoice, to retrieve invoice processed on a particular date, or to retrieve invoice for a specific Wineshipping warehouse transaction.  There are also pagination and skip/top query parameters that allow customers to further control the invoices that are returned in the response.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InvoiceDetailsResult]
    def get_invoice_details(body, opts = {})
      data, _status_code, _headers = get_invoice_details_with_http_info(body, opts)
      data
    end

    # This method allows a customer to retrieve billing invoices. Billing invoices include Fulfillment, DTT, Storage, Supplemental invoice types. There are multiple input filters available for use, including filters to retrieve specific types of billing invoice, to retrieve invoice processed on a particular date, or to retrieve invoice for a specific Wineshipping warehouse transaction.  There are also pagination and skip/top query parameters that allow customers to further control the invoices that are returned in the response.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoiceDetailsResult, Integer, Hash)>] InvoiceDetailsResult data, response status code and response headers
    def get_invoice_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.get_invoice_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BillingApi.get_invoice_details"
      end
      # resource path
      local_var_path = '/api/Billing/GetInvoiceDetails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InvoiceDetailsResult' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#get_invoice_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
