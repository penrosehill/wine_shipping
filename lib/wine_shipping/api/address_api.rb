=begin
#Wineshipping API Suite

#Wineshipping API is a programmatically consumable service or an Application Programming Interface (API) suite designed to enable Wineshipping LLC's client applications to natively transmit and manage their order, view inventory, create product, validate address, track shipments etc.<br /><br />In order to access API operations request a user key and password from Wineshipping. For any questions please contact Wineshipping Helpdesk at <a href='mailto:api@wineshipping.com?Subject=API from Wineshipping'>api@wineshipping.com</a>.

OpenAPI spec version: V3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.44
=end

module WineShipping
  class AddressApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # This operation searches for, and returns, the addresses of the carrier pickup locations where wine shipments are allowed. You can also narrow your search by type of carrier, city, state, zip code and/or paginate through the result set.  Note: The information provided by the Wineshipping Get Carrier Locations API service is based on the corresponding FedEx and/or UPS service information available at the time of inquiry, and is subject to change without notice. Due to these factors, Wineshipping cannot guarantee the accuracy of current or future information generated by this API service.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CarrierLocationsResult]
    def get_carrier_locations(body, opts = {})
      data, _status_code, _headers = get_carrier_locations_with_http_info(body, opts)
      data
    end

    # This operation searches for, and returns, the addresses of the carrier pickup locations where wine shipments are allowed. You can also narrow your search by type of carrier, city, state, zip code and/or paginate through the result set.  Note: The information provided by the Wineshipping Get Carrier Locations API service is based on the corresponding FedEx and/or UPS service information available at the time of inquiry, and is subject to change without notice. Due to these factors, Wineshipping cannot guarantee the accuracy of current or future information generated by this API service.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CarrierLocationsResult, Integer, Hash)>] CarrierLocationsResult data, response status code and response headers
    def get_carrier_locations_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.get_carrier_locations ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AddressApi.get_carrier_locations"
      end
      # resource path
      local_var_path = '/api/Address/GetCarrierLocations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CarrierLocationsResult' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#get_carrier_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the Wineshipping Address Validation and Classification API operation to validate/correct and classify recipient addresses before you send the order to Wineshipping for fulfillment service. This API operation formats an input to some degree, and returns validation and classification indicators along with formatted addresses if any matching addresses are found. The operation also support searching pickup location as an option for UPS and FedEx only. Successful execution of this method will return a transaction reference identifier.Store this identifier back into your system for reference later in the event there is an issue with a specific address validation and classification result.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AddressValidationClassificationResult]
    def validation(body, opts = {})
      data, _status_code, _headers = validation_with_http_info(body, opts)
      data
    end

    # Use the Wineshipping Address Validation and Classification API operation to validate/correct and classify recipient addresses before you send the order to Wineshipping for fulfillment service. This API operation formats an input to some degree, and returns validation and classification indicators along with formatted addresses if any matching addresses are found. The operation also support searching pickup location as an option for UPS and FedEx only. Successful execution of this method will return a transaction reference identifier.Store this identifier back into your system for reference later in the event there is an issue with a specific address validation and classification result.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressValidationClassificationResult, Integer, Hash)>] AddressValidationClassificationResult data, response status code and response headers
    def validation_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.validation ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AddressApi.validation"
      end
      # resource path
      local_var_path = '/api/Address/Validation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AddressValidationClassificationResult' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
