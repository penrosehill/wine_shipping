=begin
#Wineshipping API Suite

#Wineshipping API is a programmatically consumable service or an Application Programming Interface (API) suite designed to enable Wineshipping LLC's client applications to natively transmit and manage their order, view inventory, create product, validate address, track shipments etc.<br /><br />In order to access API operations request a user key and password from Wineshipping. For any questions please contact Wineshipping Helpdesk at <a href='mailto:api@wineshipping.com?Subject=API from Wineshipping'>api@wineshipping.com</a>.

OpenAPI spec version: V3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.44
=end

module WineShipping
  class SalesOrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # This operation is used to create new sales orders in batch. Successful execution of this method will generate a new shipment orders in the fulfillment system and will return transaction reference identifier for each order. The response will contain order creation status for each order along with individual order transaction number for reference later in the event there is an issue with an order.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateSalesOrdersResult]
    def batch_sales_order(body, opts = {})
      data, _status_code, _headers = batch_sales_order_with_http_info(body, opts)
      data
    end

    # This operation is used to create new sales orders in batch. Successful execution of this method will generate a new shipment orders in the fulfillment system and will return transaction reference identifier for each order. The response will contain order creation status for each order along with individual order transaction number for reference later in the event there is an issue with an order.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSalesOrdersResult, Integer, Hash)>] CreateSalesOrdersResult data, response status code and response headers
    def batch_sales_order_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrderApi.batch_sales_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SalesOrderApi.batch_sales_order"
      end
      # resource path
      local_var_path = '/api/SalesOrder/BatchSalesOrder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CreateSalesOrdersResult' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrderApi#batch_sales_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use this operation to cancel an existing open sales order. Successful execution of this method will cancel the sales order in Wineshipping system. If the order cannot be cancelled for some reason standard HTTP Status Code and a reason will be returned.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_sales_order(body, opts = {})
      cancel_sales_order_with_http_info(body, opts)
      nil
    end

    # Use this operation to cancel an existing open sales order. Successful execution of this method will cancel the sales order in Wineshipping system. If the order cannot be cancelled for some reason standard HTTP Status Code and a reason will be returned.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_sales_order_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrderApi.cancel_sales_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SalesOrderApi.cancel_sales_order"
      end
      # resource path
      local_var_path = '/api/SalesOrder/CancelSalesOrder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrderApi#cancel_sales_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Successful execution of this method will generate a new shipment order in Wineshipping's system and will return a transaction reference identifier. Store this identifier back into your system for reference later in the event there is an issue with your order.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_sales_order(body, opts = {})
      create_sales_order_with_http_info(body, opts)
      nil
    end

    # Successful execution of this method will generate a new shipment order in Wineshipping&#x27;s system and will return a transaction reference identifier. Store this identifier back into your system for reference later in the event there is an issue with your order.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_sales_order_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrderApi.create_sales_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SalesOrderApi.create_sales_order"
      end
      # resource path
      local_var_path = '/api/SalesOrder/CreateSalesOrder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrderApi#create_sales_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use this operation to retrieve a list of on-hold orders for a customer. Successful execution of this method will generate a list of on hold orders from Wineshipping's system and if no orders are on hold, HTTP status code Not Found response will be returned.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderOnHold>]
    def get_orders_on_hold(body, opts = {})
      data, _status_code, _headers = get_orders_on_hold_with_http_info(body, opts)
      data
    end

    # Use this operation to retrieve a list of on-hold orders for a customer. Successful execution of this method will generate a list of on hold orders from Wineshipping&#x27;s system and if no orders are on hold, HTTP status code Not Found response will be returned.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderOnHold>, Integer, Hash)>] Array<OrderOnHold> data, response status code and response headers
    def get_orders_on_hold_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrderApi.get_orders_on_hold ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SalesOrderApi.get_orders_on_hold"
      end
      # resource path
      local_var_path = '/api/SalesOrder/GetOrdersOnHold'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Array<OrderOnHold>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrderApi#get_orders_on_hold\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use this operation to retrieve a list of return sales orders for a customer. Successful execution of this method will generate a list of returns from Wineshipping system.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ReturnResult]
    def get_returns(body, opts = {})
      data, _status_code, _headers = get_returns_with_http_info(body, opts)
      data
    end

    # Use this operation to retrieve a list of return sales orders for a customer. Successful execution of this method will generate a list of returns from Wineshipping system.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResult, Integer, Hash)>] ReturnResult data, response status code and response headers
    def get_returns_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrderApi.get_returns ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SalesOrderApi.get_returns"
      end
      # resource path
      local_var_path = '/api/SalesOrder/GetReturns'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ReturnResult' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrderApi#get_returns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use this operation to update an existing open sales order. Successful execution of this method will update an open sales order in Wineshipping system. If for some reason the order cannot be updated standard HTTP Status Code and a reason will be returned.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :is_cancel_only 
    # @return [nil]
    def update_sales_order(body, opts = {})
      update_sales_order_with_http_info(body, opts)
      nil
    end

    # Use this operation to update an existing open sales order. Successful execution of this method will update an open sales order in Wineshipping system. If for some reason the order cannot be updated standard HTTP Status Code and a reason will be returned.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :is_cancel_only 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_sales_order_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrderApi.update_sales_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SalesOrderApi.update_sales_order"
      end
      # resource path
      local_var_path = '/api/SalesOrder/UpdateSalesOrder'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'IsCancelOnly'] = opts[:'is_cancel_only'] if !opts[:'is_cancel_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrderApi#update_sales_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
